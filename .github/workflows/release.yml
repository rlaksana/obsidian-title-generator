# This GitHub Actions workflow automates the process of creating a new release.
# It is triggered automatically on every push to the 'main' branch.

name: 'Automatic Release'

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual trigger

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper version detection

      - name: 'Set up Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 'Install Dependencies'
        run: npm install --legacy-peer-deps

      - name: 'Build Plugin'
        run: npm run build

      - name: 'Auto-determine Version'
        id: check_release
        run: |
          # Always increment from latest release for every commit/push
          echo "🚀 Auto-incrementing version for every commit/push..."
          
          # Get latest release version
          LATEST_RELEASE=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' 2>/dev/null | sed 's/^v//' || echo "")
          
          if [ -z "$LATEST_RELEASE" ]; then
            # No releases yet, start from manifest.json
            LATEST_RELEASE=$(jq -r .version manifest.json)
            echo "No existing releases, starting from manifest version: $LATEST_RELEASE"
          else
            echo "Latest release found: $LATEST_RELEASE"
          fi
          
          # Always increment patch version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_RELEASE"
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
          
          echo "Auto-incrementing: $LATEST_RELEASE → $NEW_VERSION"
          echo "CURRENT_VERSION=$LATEST_RELEASE" >> $GITHUB_ENV
          echo "RELEASE_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "NEEDS_INCREMENT=true" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Update Version Files'
        run: |
          echo "📝 Updating all version files to $RELEASE_VERSION..."

          # Update manifest.json
          jq --arg version "$RELEASE_VERSION" '.version = $version' manifest.json > manifest.tmp && mv manifest.tmp manifest.json

          # Update package.json
          jq --arg version "$RELEASE_VERSION" '.version = $version' package.json > package.tmp && mv package.tmp package.json

          # Update versions.json
          jq --arg version "$RELEASE_VERSION" --arg minVersion "0.15.0" '. + {($version): $minVersion}' versions.json > versions.tmp && mv versions.tmp versions.json

          # Update dist files
          cp manifest.json dist/manifest.json
          cp versions.json dist/versions.json

          echo "✅ All version files updated to $RELEASE_VERSION"

      - name: 'Prepare Release Assets'
        run: |
          echo "🎯 Preparing release assets for $RELEASE_VERSION"
          echo "📦 Updated assets are ready for release"
          echo "💡 Note: Version increment is only for release assets, not committed to repo"

      - name: 'Verify Assets Exist'
        run: |
          echo "Checking required assets..."
          if [ ! -f "dist/main.js" ]; then
            echo "Error: dist/main.js not found!"
            exit 1
          fi
          if [ ! -f "dist/manifest.json" ]; then
            echo "Error: dist/manifest.json not found!"
            exit 1
          fi
          echo "Assets verified successfully"
          echo "dist/main.js size: $(wc -c < dist/main.js) bytes"
          echo "dist/manifest.json content:"
          cat dist/manifest.json

      - name: 'Create GitHub Release'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="v$RELEASE_VERSION"

          # Check if release already exists (double check)
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release $TAG already exists, deleting and recreating..."
            gh release delete "$TAG" --yes --cleanup-tag || true
            sleep 5  # Increased wait time for CDN propagation
          fi

          # Create the release with retry logic
          echo "Creating release $TAG..."
          for i in {1..3}; do
            if gh release create "$TAG" \
              --title "Release $TAG" \
              --generate-notes \
              dist/main.js dist/manifest.json; then
              echo "Release created successfully on attempt $i!"
              break
            else
              echo "Attempt $i failed, waiting 10 seconds before retry..."
              sleep 10
            fi
          done

          # Wait for CDN propagation
          echo "Waiting for CDN propagation..."
          sleep 30

          # Verify assets are accessible
          echo "Verifying asset accessibility..."
          MAIN_JS_URL="https://github.com/${{ github.repository }}/releases/download/$TAG/main.js"
          MANIFEST_URL="https://github.com/${{ github.repository }}/releases/download/$TAG/manifest.json"
          
          for i in {1..10}; do
            echo "Verification attempt $i/10..."
            if curl -f -s -L "$MAIN_JS_URL" > /dev/null && curl -f -s -L "$MANIFEST_URL" > /dev/null; then
              echo "✅ Assets are accessible!"
              break
            else
              echo "Assets not yet accessible, waiting 30 seconds..."
              sleep 30
            fi
          done

          echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/$TAG"

      - name: 'Create Mirror Release for CDN Reliability'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create a secondary release with slightly different name to ensure CDN propagation
          MIRROR_TAG="v$RELEASE_VERSION-mirror"
          
          echo "Creating mirror release $MIRROR_TAG for CDN reliability..."
          sleep 60  # Wait 1 minute for initial CDN propagation
          
          # Create mirror release
          gh release create "$MIRROR_TAG" \
            --title "Mirror Release $MIRROR_TAG" \
            --notes "Mirror release for CDN reliability. Use main release v$RELEASE_VERSION for BRAT." \
            dist/main.js dist/manifest.json
          
          echo "Mirror release created for CDN reliability"
          
          # Clean up mirror release after 5 minutes (for CDN propagation)
          echo "Scheduling mirror release cleanup..."
          sleep 300
          gh release delete "$MIRROR_TAG" --yes --cleanup-tag || echo "Mirror release cleanup failed (expected)"

      - name: 'Post-Release Verification'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="v$RELEASE_VERSION"
          echo "Running post-release verification..."
          
          # Multiple verification attempts with different methods
          MAIN_JS_URL="https://github.com/${{ github.repository }}/releases/download/$TAG/main.js"
          MANIFEST_URL="https://github.com/${{ github.repository }}/releases/download/$TAG/manifest.json"
          
          echo "Direct URL verification:"
          for i in {1..5}; do
            echo "Verification round $i/5..."
            
            # Test with curl
            if curl -f -s -L "$MAIN_JS_URL" > /tmp/main.js && curl -f -s -L "$MANIFEST_URL" > /tmp/manifest.json; then
              echo "✅ Direct URL access successful"
              MAIN_SIZE=$(wc -c < /tmp/main.js)
              MANIFEST_SIZE=$(wc -c < /tmp/manifest.json)
              echo "Downloaded sizes: main.js=$MAIN_SIZE bytes, manifest.json=$MANIFEST_SIZE bytes"
              
              # Verify content integrity
              if [ "$MAIN_SIZE" -gt 1000 ] && [ "$MANIFEST_SIZE" -gt 100 ]; then
                echo "✅ File sizes look good"
                break
              else
                echo "❌ File sizes too small, potential CDN issue"
              fi
            else
              echo "❌ Direct URL access failed"
            fi
            
            if [ $i -lt 5 ]; then
              echo "Waiting 60 seconds before next verification..."
              sleep 60
            fi
          done
          
          echo "✅ Release verification completed"
          echo "📋 BRAT Installation: Use repository URL 'rlaksana/title-generator'"
