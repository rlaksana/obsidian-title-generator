# This GitHub Actions workflow automates the process of creating a new release.
# It is triggered automatically on every push to the 'main' branch.

name: 'Automatic Release'

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual trigger

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper version detection

      - name: 'Set up Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 'Install Dependencies'
        run: npm install --legacy-peer-deps

      - name: 'Build Plugin'
        run: npm run build

      - name: 'Auto-determine Version'
        id: check_release
        run: |
          # Always increment from latest release for every commit/push
          echo "🚀 Auto-incrementing version for every commit/push..."
          
          # Get latest release version
          LATEST_RELEASE=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' 2>/dev/null | sed 's/^v//' || echo "")
          
          if [ -z "$LATEST_RELEASE" ]; then
            # No releases yet, start from manifest.json
            LATEST_RELEASE=$(jq -r .version manifest.json)
            echo "No existing releases, starting from manifest version: $LATEST_RELEASE"
          else
            echo "Latest release found: $LATEST_RELEASE"
          fi
          
          # Always increment patch version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_RELEASE"
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
          
          echo "Auto-incrementing: $LATEST_RELEASE → $NEW_VERSION"
          echo "CURRENT_VERSION=$LATEST_RELEASE" >> $GITHUB_ENV
          echo "RELEASE_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "NEEDS_INCREMENT=true" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Update Version Files'
        run: |
          echo "📝 Updating all version files to $RELEASE_VERSION..."

          # Update manifest.json
          jq --arg version "$RELEASE_VERSION" '.version = $version' manifest.json > manifest.tmp && mv manifest.tmp manifest.json

          # Update package.json
          jq --arg version "$RELEASE_VERSION" '.version = $version' package.json > package.tmp && mv package.tmp package.json

          # Update versions.json
          jq --arg version "$RELEASE_VERSION" --arg minVersion "0.15.0" '. + {($version): $minVersion}' versions.json > versions.tmp && mv versions.tmp versions.json

          # Update dist files
          cp manifest.json dist/manifest.json
          cp versions.json dist/versions.json

          echo "✅ All version files updated to $RELEASE_VERSION"

      - name: 'Prepare Release Assets'
        run: |
          echo "🎯 Preparing release assets for $RELEASE_VERSION"
          echo "📦 Updated assets are ready for release"
          echo "💡 Note: Version increment is only for release assets, not committed to repo"

      - name: 'Verify Assets Exist'
        run: |
          echo "Checking required assets..."
          if [ ! -f "dist/main.js" ]; then
            echo "Error: dist/main.js not found!"
            exit 1
          fi
          if [ ! -f "dist/manifest.json" ]; then
            echo "Error: dist/manifest.json not found!"
            exit 1
          fi
          echo "Assets verified successfully"
          echo "dist/main.js size: $(wc -c < dist/main.js) bytes"
          echo "dist/manifest.json content:"
          cat dist/manifest.json

      - name: 'Create GitHub Release'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="v$RELEASE_VERSION"

          # Check if release already exists (double check)
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release $TAG already exists, deleting and recreating..."
            gh release delete "$TAG" --yes --cleanup-tag || true
            sleep 2
          fi

          # Create the release
          echo "Creating release $TAG..."
          gh release create "$TAG" \
            --title "Release $TAG" \
            --generate-notes \
            dist/main.js dist/manifest.json

          echo "Release created successfully!"
          echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/$TAG"
