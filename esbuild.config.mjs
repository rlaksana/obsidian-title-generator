import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import * as fs from "fs";
import * as path from "path";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

// Function to copy files
function copyFile(source, destination) {
    fs.copyFileSync(source, destination);
    console.log(`Copied ${source} to ${destination}`);
}

const prod = (process.argv[2] === "production");

const outdir = "dist";

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outdir: outdir,
	mainFields: ["browser", "module", "main"],
});

if (prod) {
	await context.rebuild();
	// Ensure the output directory exists
	if (!fs.existsSync(outdir)) {
		fs.mkdirSync(outdir);
	}
	// Copy manifest.json and versions.json to the output directory
	copyFile("manifest.json", path.join(outdir, "manifest.json"));
	copyFile("versions.json", path.join(outdir, "versions.json"));
	process.exit(0);
} else {
	await context.watch();
}
